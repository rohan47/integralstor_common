import command, os, subprocess, common

def get_services_list ():
  services = [('ntpd','NTP'), ('smb', 'CIFS - smb'), ('winbind', 'CIFS - winbind'), ('tgtd', 'ISCSI'), ('nfs', 'NFS'),('vsftpd','FTP'),('shellinaboxd','Shell Access'),('urbackup-server','UrBackup Server'),('clamd@scan','ClamAV')]
  if services:
    return services, None
  else: 
    return None, 'Service list is empty'

def get_sysd_services_status ():
  try:
    services, err = get_services_list ()
    if err:
     raise Exception (err)
    
    services_dict = {}
    is_err = False
    for service in services:
      services_dict[service[0]] = {}
      services_dict[service[0]]['name'] =  service[1]
      services_dict[service[0]]['service'] =  service[0]
      sd, err = get_sysd_service_status (service)
      if not sd:
        if err:
          services_dict[service[0]]['err'] = err
        else:
          services_dict[service[0]]['err'] = 'Error retrieving status'
      services_dict[service[0]]['info'] = sd

  except Exception, e:
    return None, 'Error retrieving service status : %s' %str(e)
  else:
    return services_dict, None



def get_sysd_service_status (service):
  d = {}
  d['status'] = {}
  d['status']['rc'] = ''
  d['status']['status_str'] = ''
  d['status']['output_str'] = ''
  d['is_active'] = {}
  d['is_active']['rc'] = ''
  d['is_active']['status_str'] = ''
  d['is_active']['output_str'] = ''
  d['is_failed'] = {}
  d['is_failed']['rc'] = ''
  d['is_failed']['status_str'] = ''
  d['is_failed']['output_str'] = ''
  d['is_enabled'] = {}
  d['is_enabled']['rc'] = ''
  d['is_enabled']['status_str'] = ''
  d['is_enabled']['output_str'] = ''
  try:
    (ret, rc), err = command.execute_with_rc ('systemctl status %s' %service[0])
    if err:
      raise Exception (err)
    d['status']['rc'] = rc
    out, err1 = command.get_output_list (ret)
    if err1:
      raise Exception (err1) 
    if out:
      d['status']['output_str'] += ','.join (out)
    err2, e = command.get_error_list (ret)
    if e:
      raise Exception (e)
    if err2:
      d['status']['output_str'] += ','.join (err2)

    if not err:
      (ret, rc), err = command.execute_with_rc ('systemctl is-failed %s' %service[0])
      if err:
        raise Exception (err)
      d['is_failed']['rc'] = rc
      out, err = command.get_output_list (ret)
      if err:
        raise Exception (err)

      if out:
        d['is_failed']['output_str'] += ','.join (out)

      if rc == 0:
        d['is_failed']['status_str'] = "Failed"
	d['status']['status_str'] = "Failed"
	d['status']['output_str'] += ','.join (out)
      else:
        (ret, rc), err = command.execute_with_rc ('systemctl is-active %s' %service[0])
        if err:
          raise Exception (err)
        d['is_active']['rc'] = rc
       
        out, err = command.get_output_list (ret)
        if err:
          raise Exception (err)
        if out:
          d['is_active']['output_str'] += ','.join (out)

        if rc == 0:
          d['is_active']['status_str'] = "Active"
 	  d['status']['status_str'] = "Active"
	  d['status']['output_str'] += ','.join (out)
        elif rc == 3:
          d['is_active']['status_str'] = "Inactive"
	  d['status']['status_str'] = "Inactive"
	  d['status']['output_str'] += ','.join (out)
        else:
          d['status']['status_str'] = "Unknown State"
    (ret, rc), err = command.execute_with_rc ('systemctl is-enabled %s' %service[0])
    if err:
      raise Exception (err)
    d['is_enabled']['rc'] = rc
    out, err = command.get_output_list (ret)
    if err:
      raise Exception (err)

    if out:
      d['is_enabled']['output_str'] += ','.join (out)

    if not rc:
      d['is_enabled']['status_str'] = "Enabled"
    else:
      d['is_enabled']['status_str'] = "Disabled"
  except Exception, e:
    return None, 'Error retrieving service status : %s' %str(e)
  else:
    return d, None

def get_service_status(service):
  d = {}
  try:
    (ret, rc), err = command.execute_with_rc('service %s status'%service[0])
    if err:
      raise Exception(err)
    d['status_code'] = rc
    if rc == 0:
      d['status_str'] = 'Running'
    elif rc == 3:
      d['status_str'] = 'Stopped'
    elif rc == 1:
      d['status_str'] = 'Error'
    d['output_str'] = ''
    out, err = command.get_output_list(ret)
    if err:
      raise Exception(err)
    if out:
      d['output_str'] += ','.join(out)
    err, e = command.get_error_list(ret)
    if e:
      raise Exception(e)
    if err:
      d['output_str'] += ','.join(err)
  except Exception, e:
    return None, 'Error retrieving service status : %s'%str(e)
  else:
    return d, None

def change_service_status(service, action):
  out = None
  try:
    if os.path.exists('/tmp/cout'):
      os.remove('/tmp/cout')
    init_type, err = common.get_init_type ()
    if err:
      raise Exception (err)
    if init_type == 'init':
      cmd = '/sbin/service %s %s'%(service, action)
    elif init_type == 'systemd':
      cmd = 'systemctl %s %s'%(action, service)
    else:
      raise Exception ('No systemd or init found. Not changing the service status')  
    #print cmd
    
    #if init_type == 'init':
    with open('/tmp/cout', 'w') as f:
      proc = subprocess.Popen(cmd.split(), stdout = f, stderr = f, close_fds = True, universal_newlines=True)
      proc.wait()
      ret = proc.communicate()
    if os.path.exists('/tmp/cout'):
      with open('/tmp/cout', 'r') as f:
	out = f.readlines()
    
  except Exception, e:
    return None, 'Error modifying service status : %s'%str(e)
  else:
    return out, None

get_sysd_services_status()
