import os, unicodedata, json

def get_init_type():
  init_type = None
  try:
    with open('/proc/1/cmdline', 'r') as f:
      line = f.readline()
      if 'init' in line:
        init_type = 'init'
      elif 'systemd' in line:
        init_type = 'systemd'
      else:
        raise Exception('Unknown init type')
  except Exception, e:
    return None, 'Error retrieving init type : %s'%e
  else:
    return init_type, None

"""
Tells us if we are running a unicell or gridcell based on the file called platform which is generated by the install process
"""

def get_platform():
  platform = None
  lines = None
  try:
    product_root, err = get_product_root()
    if err:
      raise Exception(err)
    with open('%s/platform'%product_root, 'r') as f:
      pd = json.load(f)
      if pd and 'platform' in pd:
        platform = pd['platform']
    if not platform or (platform not in ['unicell', 'gridcell']):
      raise Exception('Unrecognized platform type')
    '''
      lines = f.readlines()
    if lines and lines[0].strip().lower() in ['unicell', 'gridcell']:
      platform = lines[0].strip().lower()
    else:
      raise Exception('Unrecognized platform type')
    '''
  except Exception, e:
    return None, "Error retrieving platform type : %s"%str(e)
  else:
    return platform, None


"""
Tells us if we are running on a known hardware platform for which specific code is available.
"""
def get_hardware_platform():
  platform = None
  lines = None
  try:
    product_root, err = get_product_root()
    if err:
      raise Exception(err)
    with open('%s/platform'%product_root, 'r') as f:
      pd = json.load(f)
      if pd and 'platform' in pd:
        platform = pd['hardware_vendor']
    '''
      lines = f.readlines()
    if lines and lines[1].strip().lower() == "self":
      platform = lines[1].strip().lower()
    else:
      platform = "Custom"
    '''
  except Exception, e:
    return None, "Error retrieving platform type : %s"%str(e)
  else:
    return platform, None

"""
Shd we use salt or not? This gives us the answer. Currently, it says no for unicell and yes for gridcell.
"""
def use_salt():
  use = False
  try:
    platform, err = get_platform()
    if err:
      raise Exception(err)
    if platform and platform == 'gridcell':
      use = True
  except Exception, e:
    return False, "Error checking saltstack usage : %s"%str(e)
  else:
    return use, None

"""
The install root for integralstor
"""
def get_product_root():
  return '/opt/integralstor', None

"""
The root directory for unicell or gridcell
"""
def get_platform_root():
  root = None
  try:
    platform, err = get_platform()
    if err:
      raise Exception(err)
    product_root, err = get_product_root()
    if err:
      raise Exception(err)
    if not platform:
      raise Exception('Could not determine platform')
    root = '%s/integralstor_%s'%(product_root, platform)
  except Exception, e:
    return None, "Error retrieving platform root : %s"%str(e)
  else:
    return root, None

def get_version():
  version = "Unspecified"
  lines = None
  try:
    platform_root, err = get_platform_root()
    if err:
      raise Exception(err)
    with open('%s/version'%platform_root, 'r') as f:
      lines = f.readlines()
    version = lines[0].strip()
  except Exception, e:
    return None, "Error retrieving version number : %s"%str(e)
  else:
    return version, None

"""
The directory where SSL certs and keys are stored.
"""
def get_pki_dir():
  dir = None
  try:
    product_root, err = get_product_root()
    if err:
      raise Exception(err)
    dir = '%s/pki'%product_root
  except Exception, e:
    return None, "Error retrieving certificates location : %s"%str(e)
  else:
    return dir, None

"""
Currently, this is used to permit multiple simultaneous logins in a devel environment. Controlled by prescence of a file called devel_env
"""
def is_production():

  ret = False
  try:
    product_root, err = get_product_root()
    if err:
      raise Exception(err)
    if os.path.isfile('%s/devel_env'%product_root):
      ret =  False
    else:
      ret =  True
  except Exception, e:
    return None, 'Error getting production setting: %s'%str(e)
  else:
    return ret, None

"""
The directory where the install defaults are stored.
"""
def get_defaults_dir():
  ret = None
  try:
    root, err = get_platform_root()
    if err:
      raise Exception(err)
    if not root:
      raise Exception('Could not retrieve platform root')
    ret =  "%s/defaults"%root
  except Exception, e:
    return None, 'Error getting defaults directory : %s'%str(e)
  else:
    return ret, None

"""
Directory where binary files are stored.
"""
def get_bin_dir():
  ret = None
  try:
    root, err = get_platform_root()
    if err:
      raise Exception(err)
    if not root:
      raise Exception('Could not retrieve platform root')
    ret =  "%s/bin"%root
  except Exception, e:
    return None, 'Error getting bin directory : %s'%str(e)
  else:
    return ret, None

"""
Path to a temp dir for use in the code
"""
def get_tmp_path():
  ret = None
  try:
    root, err = get_platform_root()
    if err:
      raise Exception(err)
    if not root:
      raise Exception('Could not retrieve platform root')
    ret =  "%s/tmp"%root
  except Exception, e:
    return None, 'Error getting tmp directory : %s'%str(e)
  else:
    return ret, None

"""
Path to python scripts specific to the platform.
"""
def get_python_scripts_path():
  ret = None
  try:
    root, err = get_platform_root()
    if err:
      raise Exception(err)
    if not root:
      raise Exception('Could not retrieve platform root')
    ret =  "%s/scripts/python"%root
  except Exception, e:
    return None, 'Error getting python scripts directory : %s'%str(e)
  else:
    return ret, None

"""
Path to python scripts common across platforms.
"""
def get_common_python_scripts_path():
  ret = None
  try:
    product_root, err = get_product_root()
    if err:
      raise Exception(err)
    ret =  "%s/integralstor_common/scripts/python"%product_root
  except Exception, e:
    return None, 'Error getting python scripts directory : %s'%str(e)
  else:
    return ret, None

"""
Path to shell scripts specific to the platform.
"""
def get_shell_scripts_path():
  ret = None
  try:
    root, err = get_platform_root()
    if err:
      raise Exception(err)
    if not root:
      raise Exception('Could not retrieve platform root')
    ret =  "%s/scripts/shell"%root
  except Exception, e:
    return None, 'Error getting shell scripts directory : %s'%str(e)
  else:
    return ret, None

"""
gridcell specific - the gluster volume used to store config info.
"""
def get_admin_vol_name():
  return "integralstor_admin_vol", None

"""
The path to the dir where all integralstor configs and logs are stored.
"""
def get_config_dir():
  ret = None
  try:
    root, err = get_platform_root()
    if err:
      raise Exception(err)
    if not root:
      raise Exception('Could not retrieve platform root')
    ret =  "%s/config"%root
  except Exception, e:
    return None, 'Error getting config directory : %s'%str(e)
  else:
    return ret, None

"""
The salt master file
"""
def get_salt_master_config():
  return '/etc/salt/master', None

"""
Path to the kerberos config file
"""
def get_krb5_conf_path():
  return '/etc', None

"""
Path to the samba config file.
"""
def get_smb_conf_path():
  return '/etc/samba', None

"""
The path to the dir where the system status and manifest files are stored.
"""
def get_system_status_path():
  ret = None
  try:
    root, err = get_config_dir()
    if err:
      raise Exception(err)
    if not root:
      raise Exception('Could not retrieve platform root')
    ret =  "%s/status"%root
  except Exception, e:
    return None, 'Error getting system status directory : %s'%str(e)
  else:
    return ret, None

"""
The path to the dir where integralstor specific logs are stored.
"""
def get_log_folder_path():
  ret = None
  try:
    root, err = get_config_dir()
    if err:
      raise Exception(err)
    if not root:
      raise Exception('Could not retrieve platform root')
    ret =  "%s/logs"%root
  except Exception, e:
    return None, 'Error getting logs directory : %s'%str(e)
  else:
    return ret, None

"""
The path where the ntp.conf is stored.
"""
def get_ntp_conf_path():
  return "/etc", None

"""
Path where the integralstor database is stored.
"""
def get_db_path():
  ret = None
  try:
    root, err = get_config_dir()
    if err:
      raise Exception(err)
    if not root:
      raise Exception('Could not retrieve config root')
    ret =  "%s/db/integral_view_config.db"%root
  except Exception, e:
    return None, 'Error getting system database directory : %s'%str(e)
  else:
    return ret, None

"""
Path to the location where batch process files are generated and stored. Mainly used in gridcell.
"""
def get_batch_files_path():
  ret = None
  try:
    root, err = get_config_dir()
    if err:
      raise Exception(err)
    if not root:
      raise Exception('Could not retrieve config root')
    ret =  "%s/batch_processes"%root
  except Exception, e:
    return None, 'Error getting system batch processes directory : %s'%str(e)
  else:
    return ret, None


"""
path to the audit log dir
"""
def get_audit_dir():
  ret = None
  try:
    root, err = get_log_folder_path()
    if err:
      raise Exception(err)
    if not root:
      raise Exception('Could not retrieve logs root')
    ret =  "%s/audit"%root
  except Exception, e:
    return None, 'Error getting system audit logs directory : %s'%str(e)
  else:
    return ret, None


"""
path to the alerts log dir
"""
def get_alerts_dir():
  ret = None
  try:
    root, err = get_log_folder_path()
    if err:
      raise Exception(err)
    if not root:
      raise Exception('Could not retrieve config root')
    ret =  "%s/alerts"%root
  except Exception, e:
    return None, 'Error getting system alerts log directory : %s'%str(e)
  else:
    return ret, None

"""
Utility function, when given a path will create if the directory does not exist.
"""
def get_or_create_dir(path):
  try:
    if not os.path.exists(path):
      os.makedirs(path)
    else:
      pass
    return True,None
  except Exception,e:
    return None,e

def get_alerts_url_component():
  return "raise_alert", None

def get_alerts_url_host():
  return "gridcell-pri.integralstor.lan", None

def get_audit_url_component():
  return "internal_audit", None

def get_audit_url_host():
  return "gridcell-pri.integralstor.lan", None

def convert_unicode_to_string(value):
  return unicodedata.normalize('NFKD', value).encode('ascii','ignore') 

"""
Currently not used.
"""
def get_devel_files_path():
  return "/opt/integralstor/integralstor_gridcell/devel/files", None

"""
ClamAV related files and configuration
"""
def get_clamav_config_path():
  ret = None
  try :
    root , err = get_config_dir()
    if err : 
      raise Exception(err)
    if not root:
      raise Exception("Error getting configuration directory.")
    ret = "%s/clamav"%root
  except Exception,e:
    return None, 'Error getting configuration directory : %s'%str(e)
  else :
    return ret, None

"""
ClamAV logs path
"""
def get_clamav_log_folder_path():
  ret = None
  try:
    root, err = get_log_folder_path()
    if err:
      raise Exception(err)
    if not root:
      raise Exception('Could not retrieve log folder path')
    ret =  "%s/clamav"%root
  except Exception, e:
    return None, 'Error getting logs directory : %s'%str(e)
  else:
    return ret, None
"""
ClamAV Quarantine Path
"""
def get_clamav_quarantine_path():
  ret = None
  try :
    root , err = get_config_dir()
    if err : 
      raise Exception(err)
    if not root:
      raise Exception("Error getting configuration directory.")
    ret = "%s/clamav/quarantine"%root
  except Exception,e:
    return None, 'Error getting configuration directory : %s'%str(e)
  else :
    return ret, None
"""
ClamAV virus definations directory
"""
def clamav_virus_definations_directory():
  ret = None
  try :
    root , err = get_config_dir()
    if err : 
      raise Exception(err)
    if not root:
      raise Exception("Error getting configuration directory.")
    ret = "%s/clamav/virus_definations"%root
  except Exception,e:
    return None, 'Error getting configuration directory : %s'%str(e)
  else :
    return ret, None



def main():
  print get_platform()
  print get_hardware_platform()
  #print get_version()

if __name__ == "__main__":
  main()
