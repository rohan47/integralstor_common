#!usr/bin/python
from os import listdir
import os.path,time
from integralstor_common import scheduler_utils, common, command, file_processing, services_management

def in_scan_list(dataset_name):
  ret_val = None
  try:
    root,err = common.get_clamav_config_path()
    if err:
      raise Exception(err)
    with open('%s/scan_list.txt'%root,'r') as f:
      complete_file = f.read()
    list_of_datasets = complete_file.split('\n')
    path_name,err = file_processing.normalise_path(dataset_name)
    if err:
      raise Exception(err)
    if path_name in list_of_datasets:
      ret_val = True
    else:
      ret_val = False
  except Exception,e:
    return ret_val, 'Error checking dataset scan list: %s'%str(e)
  else:
    return ret_val, None

def update_scan_list(name, activity):
  ret_val = None
  try:
    root,err = common.get_clamav_config_path()
    if err:
      raise Exception(err)
    old_status,err = in_scan_list(name)
    if err:
      raise Exception(err)
    path_name,err = file_processing.normalise_path(name)
    if err:
      raise Exception(err)
    if activity=='add' and not old_status:
      with open('%s/scan_list.txt'%root,'a') as f:
        f.write('%s\n'%path_name)
      ret_val = True
    elif activity=='remove' and old_status:
      with open('%s/scan_list.txt'%root,'r') as f:
        lines = f.readlines()
      with open('%s/scan_list.txt'%root,'w') as f:
        for line in lines:
          if line.strip('\n') != '%s'%path_name:
            f.write(line)
      ret_val = False
  except Exception , e:
    return ret_val, 'Error updating virus scan list: %s'%str(e)
  else:
    return ret_val, None

def get_virus_scan_log():
  ret_val = None
  try:
    root,err = common.get_clamav_log_folder_path()
    if err:
      raise Exception(err)
    with open('%s/clamav.log'%root,'r') as f:
      f.seek(0)
      lines = f.read()
    av_log_list = lines.split('\n')
    av_log_list.reverse()
    ret_val = av_log_list
  except Exception,e:
    return None,'Error retriving clamav log: %s',str(e)
  else:
    return ret_val, None


def get_clamav_conf(service):
  ret_val = None
  try:
    if service not in ['clamd','freshclam']:
      raise Exception('Invalid clamav service')
    root,err = common.get_clamav_config_path()
    if err:
      raise Exception(err)
    with open('%s/config/%s.conf'%(root,service),'r') as f:
      conf = f.read()
    conf_list = conf.split('\n')
    conf_dict = dict()
    for i in conf_list:
      if i=='':
        pass
      elif i[0]=='#':
        pass
      else :
        entry = i.split(' ')
        if entry[0] not in ['VirusEvent','OnOutdatedExecute']:
          conf_dict.update({entry[0]:entry[1]})
    ret_val = conf_dict
  except Exception,e:
    return None,'Error retriving %s conf: %s'%(service,str(e))
  else:
    return ret_val, None



def update_clamav_conf(conf_dict,service):
  ret_val = None
  try:
    if service not in ['clamd','freshclam']:
      raise Exception('Invalid clamav service')
    script_root,err = common.get_python_scripts_path()
    if err:
      raise Exception(err)
    root,err = common.get_clamav_config_path()
    if err:
      raise Exception(err)
    st = None
    with open('%s/config/%s.conf'%(root,service),'w') as f:
      for key in conf_dict.iterkeys():
        f.write('%s %s\n'%(key,conf_dict[key]))
      if service == 'clamd':
        f.write('VirusEvent %s/virusevent.py "%%v"\n'%script_root)
        service = 'clamd@scan'
        action = 'restart'
        status,err = services_management.change_service_status(service, action)
        if err:
          raise Exception(err)
      elif service == 'freshclam':
        f.write('OnOutdatedExecute %s/update_event.py "%%v"\n'%script_root)
        command.get_command_output('killall freshclam')
        cmd = 'freshclam -d'
        status,err = command.get_command_output(cmd)
        if err:
          raise Exception(err)
  except Exception,e:
    return None,'Error writing %s conf file: %s'%(service,str(e))
  else:
    return ret_val, None


#[u'0', u'0', u'*', u'*', u'*']
def add_clamav_cron(schedule,old_cron_id):
  ret_val = None
  try:
    root,err = common.get_clamav_config_path()
    if err:
      raise Exception(err)
    if old_cron_id:
      cron_remove,err = scheduler_utils.remove_cron(old_cron_id)
      if err:
        raise Exception(err)
    cmd = 'clamdscan --no-summary --quiet -m -c /etc/clamd.d/scan.conf --move /opt/integralstor/integralstor_unicell/config/clamav/quarantine/  -f  /opt/integralstor/integralstor_unicell/config/clamav/scan_list.txt '
    description = 'ClamAV Scan'
    cron_task_id, err = scheduler_utils.add_cron_task(cmd, description,schedule[0],schedule[1],schedule[2],schedule[3],schedule[4])
    if err:
      raise Exception(err)
    with open('%s/cron_id'%root,'w') as f:
      f.write(str(cron_task_id))
    ret_val = cron_task_id
  except Exception, e :
    return None, 'Error adding cron task for clamav: %s'%str(e)
  else:
    return ret_val,None

def get_clamav_cron_id():
  ret_val = None
  try:
    root,err = common.get_clamav_config_path()
    if err:
      raise Exception(err)
    with open('%s/cron_id'%root,'r') as f:
      cron_task_id = f.read()
    
    if cron_task_id == '':
      ret_val = None
      '''
      schedule = [u'0', u'0', u'*', u'*', u'*']
      status,err = add_clamav_cron(schedule,None)
      if err:
        raise Exception(err)
    '''
    else:
      ret_val = int(cron_task_id)
  except Exception,e:
    return None, 'Error retriving cron id: %s'%str(e)
  else:
    return ret_val,None

'''
def match_date(filename):
  ret_val = None
  try:
    root,err = common.get_clamav_config_path()
    if err:
      raise Exception(err)
    file_stamp = time.ctime(os.path.getctime('%s/virus_definations/%s'%(root,filename)))
    file_stamp = file_stamp.split(' ')
    current_time = time.ctime()
    current_time = current_time.split(' ')
    if '' in file_stamp:
      file_stamp.remove('')
    if '' in current_time:
      current_time.remove('')
    if file_stamp[0] == current_time[0] and file_stamp[1] == current_time[1] and file_stamp[2] == current_time[2] and file_stamp[4] == current_time[4]:
      ret_val = True
    else:
      ret_val = False
  except Exception,e:
    return None,"Unable to check time stamp of the update file: %s"%str(e)
  else:
    return ret_val,None
'''

def delete_virus(virus_file):
  ret_val = None
  try:
    root,err = common.get_clamav_quarantine_path()
    if err:
      raise Exception(err)
    cmd = 'rm -rf %s/%s'%(root,virus_file)
    status,err = command.get_command_output(cmd)
    if err:
      raise Exception(err)
    ret_val = True
  except Exception,e:
    return None, 'Error deleting virus file: %s'%str(e)
  else:
   return ret_val,None
 

def delete_all_virus():
  ret_val = None
  try:
    virus_list,err = get_quarantine_list()
    if err:
      raise Exception(err)
    root,err = common.get_clamav_quarantine_path()
    if err:
      raise Exception(err)
    if virus_list:
      for f in virus_list:
        cmd = 'rm -rf %s/%s'%(root,f)
        status,err = command.get_command_output(cmd)
        if err:
          raise Exception(err)
        ret_value = True
  except Exception,e:
    return None, 'Error deleting virus file: %s'%str(e)
  else:
    return ret_val,None

def get_quarantine_list():
  ret_val = None
  try:
    root,err = common.get_clamav_quarantine_path()
    if err:
      raise Exception(err)
    virus_list = listdir('%s/'%root)
    ret_val = virus_list
  except Exception,e:
    return None, 'Error retriving quarantine list: %s'%str(e)
  else:
    return ret_val,None

def update_virus_definations(update_file_name):
  ret_val = None
  try:
    root,err = common.clamav_virus_definations_directory()
    if err:
      raise Exception(err)
    
    cmd = 'rm -f %s/%s'%(root,update_file_name)
    status,err = command.get_command_output(cmd)
    if err:
      raise Exception(err)
    cmd = 'rm -f /var/lib/clamav/%s'%update_file_name
    status,err = command.get_command_output(cmd)
    if err:
      raise Exception(err)
      
    cmd= 'mv %s/.new/%s %s'%(root,update_file_name,root)
    status,err = command.get_command_output(cmd)
    if err:
      raise Exception(err)
    cmd = 'ln -s %s/%s  /var/lib/clamav/%s'%(root,update_file_name,update_file_name)
    status,err = command.get_command_output(cmd)
    if err:
      raise Exception(err)
    service = 'clamd@scan'
    action = 'restart'
    status,err = services_management.change_service_status(service, action)
    if err:
      raise Exception(err)
    ret_val = True
  except Exception,e:
    return None,'Error uploading update file: %s'%str(e)
  else:
    return ret_val,None

def restore_default_clamav_conf():
  ret_val = None
  try:
    root,err = common.get_clamav_config_path()
    if err:
      raise Exception(err)
    with open('%s/config/clamd.conf.default'%root,'r') as f:
      lines = f.readlines()
    with open('%s/config/clamd.conf'%root,'w') as f:
      for line in lines:
        f.write(line)
    with open('%s/config/freshclam.conf.default'%root,'r') as f:
      lines = f.readlines()
    with open('%s/config/freshclam.conf'%root,'w') as f:
      for line in lines:
        f.write(line)
    ret_val = True
  except Exception,e:
    return None,'Error restoring default configuration: %s'%str(e)
  else:
    return ret_value,None


